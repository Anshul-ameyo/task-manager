{"ast":null,"code":"var _jsxFileName = \"/home/arawat/react/task-manager/src/components/App.js\",\n    _s = $RefreshSig$();\n\nimport { useRef, useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport TaskList from \"./TasksList\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const [tasks, setTasks] = useState([]);\n  useEffect(() => {\n    loadTasksFromLocalStorage();\n  }, []);\n\n  function addEmptyTask(status) {\n    const lastTask = tasks[tasks.length - 1];\n    let newTaskId = 1;\n\n    if (lastTask !== undefined) {\n      newTaskId = lastTask.id + 1;\n    }\n\n    setTasks(tasks => [...tasks, {\n      id: newTaskId,\n      title: \"\",\n      description: \"\",\n      status: status\n    }]);\n  }\n\n  function addTask(taskToAdd) {\n    let filteredTasks = tasks.filter(task => {\n      return task.id !== taskToAdd.id;\n    });\n    let newTaskList = [...filteredTasks, taskToAdd];\n    setTasks(newTaskList);\n    saveTasksToLocalStorage(newTaskList);\n  }\n\n  function deleteTask(taskId) {\n    let filteredTasks = tasks.filter(task => {\n      return task.id !== taskId;\n    });\n    setTasks(filteredTasks);\n    saveTasksToLocalStorage(filteredTasks);\n  }\n\n  function moveTask(id, newStatus) {\n    let task = tasks.filter(task => {\n      return task.id === id;\n    })[0];\n    let filteredTasks = tasks.filter(task => {\n      return task.id !== id;\n    });\n    task.status = newStatus;\n    let newTaskList = [...filteredTasks, task];\n    setTasks(newTaskList);\n    saveTasksToLocalStorage(newTaskList);\n  }\n\n  function saveTasksToLocalStorage(tasks) {\n    localStorage.setItem(\"tasks\", JSON.stringify(tasks));\n  }\n\n  function loadTasksFromLocalStorage() {\n    let loadedTasks = localStorage.getItem(\"tasks\");\n    let tasks = JSON.parse(loadedTasks);\n\n    if (tasks) {\n      setTasks(tasks);\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"header\",\n      children: \"Task Management\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      children: /*#__PURE__*/_jsxDEV(\"section\", {\n        className: \"flex-container\",\n        children: [/*#__PURE__*/_jsxDEV(TaskList, {\n          tasks: tasks,\n          addEmptyTask: addEmptyTask,\n          addTask: addTask,\n          deleteTask: deleteTask,\n          moveTask: moveTask,\n          status: \"To Do\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(TaskList, {\n          tasks: tasks,\n          addEmptyTask: addEmptyTask,\n          addTask: addTask,\n          deleteTask: deleteTask,\n          moveTask: moveTask,\n          status: \"In Progress\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(TaskList, {\n          tasks: tasks,\n          addEmptyTask: addEmptyTask,\n          addTask: addTask,\n          deleteTask: deleteTask,\n          moveTask: moveTask,\n          status: \"Done\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 73,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"bBd6yqkqV9dlkj9ENgRyXKaiXpk=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/home/arawat/react/task-manager/src/components/App.js"],"names":["useRef","useState","useEffect","TaskList","App","tasks","setTasks","loadTasksFromLocalStorage","addEmptyTask","status","lastTask","length","newTaskId","undefined","id","title","description","addTask","taskToAdd","filteredTasks","filter","task","newTaskList","saveTasksToLocalStorage","deleteTask","taskId","moveTask","newStatus","localStorage","setItem","JSON","stringify","loadedTasks","getItem","parse"],"mappings":"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","sourcesContent":["import { useRef, useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport TaskList from \"./TasksList\";\n\nfunction App() {\n  const [tasks, setTasks] = useState([]);\n\n  useEffect(() => {\n    loadTasksFromLocalStorage();\n  }, []);\n\n  function addEmptyTask(status) {\n    const lastTask = tasks[tasks.length - 1];\n    let newTaskId = 1;\n    if (lastTask !== undefined) {\n      newTaskId = lastTask.id + 1;\n    }\n    setTasks((tasks) => [\n      ...tasks,\n      {\n        id: newTaskId,\n        title: \"\",\n        description: \"\",\n        \n        status: status,\n      },\n    ]);\n  }\n\n  function addTask(taskToAdd) {\n    let filteredTasks = tasks.filter((task) => {\n      return task.id !== taskToAdd.id;\n    });\n    let newTaskList = [...filteredTasks, taskToAdd];\n    setTasks(newTaskList);\n    saveTasksToLocalStorage(newTaskList);\n  }\n\n  function deleteTask(taskId) {\n    let filteredTasks = tasks.filter((task) => {\n      return task.id !== taskId;\n    });\n    setTasks(filteredTasks);\n    saveTasksToLocalStorage(filteredTasks);\n  }\n\n  function moveTask(id, newStatus) {\n    let task = tasks.filter((task) => {\n      return task.id === id;\n    })[0];\n    let filteredTasks = tasks.filter((task) => {\n      return task.id !== id;\n    });\n    task.status = newStatus;\n    let newTaskList = [...filteredTasks, task];\n    setTasks(newTaskList);\n    saveTasksToLocalStorage(newTaskList);\n  }\n\n  function saveTasksToLocalStorage(tasks) {\n    localStorage.setItem(\"tasks\", JSON.stringify(tasks));\n  }\n\n  function loadTasksFromLocalStorage() {\n    let loadedTasks = localStorage.getItem(\"tasks\");\n    let tasks = JSON.parse(loadedTasks);\n    if (tasks) {\n      setTasks(tasks);\n    }\n  }\n\n  return (\n    <div className=\"App\">\n      <h1 className=\"header\">Task Management</h1>\n      <main>\n        <section className=\"flex-container\">\n          <TaskList\n            tasks={tasks}\n            addEmptyTask={addEmptyTask}\n            addTask={addTask}\n            deleteTask={deleteTask}\n            moveTask={moveTask}\n            status=\"To Do\"\n          />\n          <TaskList\n            tasks={tasks}\n            addEmptyTask={addEmptyTask}\n            addTask={addTask}\n            deleteTask={deleteTask}\n            moveTask={moveTask}\n            status=\"In Progress\"\n          />\n          <TaskList\n            tasks={tasks}\n            addEmptyTask={addEmptyTask}\n            addTask={addTask}\n            deleteTask={deleteTask}\n            moveTask={moveTask}\n            status=\"Done\"\n          />\n        </section>\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}