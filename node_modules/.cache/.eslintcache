[{"/home/arawat/react/task-manager/src/index.js":"1","/home/arawat/react/task-manager/src/components/TasksList.jsx":"2","/home/arawat/react/task-manager/src/components/Task.jsx":"3","/home/arawat/react/task-manager/src/components/App.js":"4"},{"size":210,"mtime":1626837063381,"results":"5","hashOfConfig":"6"},{"size":991,"mtime":1626840611229,"results":"7","hashOfConfig":"6"},{"size":2511,"mtime":1626839728079,"results":"8","hashOfConfig":"6"},{"size":2571,"mtime":1626837575276,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},"gztmkv",{"filePath":"13","messages":"14","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"15","messages":"16","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"17","messages":"18","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"19","usedDeprecatedRules":"12"},"/home/arawat/react/task-manager/src/index.js",[],["20","21"],"/home/arawat/react/task-manager/src/components/TasksList.jsx",[],"/home/arawat/react/task-manager/src/components/Task.jsx",[],"/home/arawat/react/task-manager/src/components/App.js",["22"],"import { useRef, useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport TaskList from \"./TasksList\";\n\nfunction App() {\n  const [tasks, setTasks] = useState([]);\n\n  useEffect(() => {\n    loadTasksFromLocalStorage();\n  }, []);\n\n  function addEmptyTask(status) {\n    const lastTask = tasks[tasks.length - 1];\n    let newTaskId = 1;\n    if (lastTask !== undefined) {\n      newTaskId = lastTask.id + 1;\n    }\n    setTasks((tasks) => [\n      ...tasks,\n      {\n        id: newTaskId,\n        title: \"\",\n        description: \"\",\n        status: status,\n      },\n    ]);\n  }\n\n  function addTask(taskToAdd) {\n    let filteredTasks = tasks.filter((task) => {\n      return task.id !== taskToAdd.id;\n    });\n    let newTaskList = [...filteredTasks, taskToAdd];\n    setTasks(newTaskList);\n    saveTasksToLocalStorage(newTaskList);\n  }\n\n  function deleteTask(taskId) {\n    let filteredTasks = tasks.filter((task) => {\n      return task.id !== taskId;\n    });\n    setTasks(filteredTasks);\n    saveTasksToLocalStorage(filteredTasks);\n  }\n\n  function moveTask(id, newStatus) {\n    let task = tasks.filter((task) => {\n      return task.id === id;\n    })[0];\n    let filteredTasks = tasks.filter((task) => {\n      return task.id !== id;\n    });\n    task.status = newStatus;\n    let newTaskList = [...filteredTasks, task];\n    setTasks(newTaskList);\n    saveTasksToLocalStorage(newTaskList);\n  }\n\n  function saveTasksToLocalStorage(tasks) {\n    localStorage.setItem(\"tasks\", JSON.stringify(tasks));\n  }\n\n  function loadTasksFromLocalStorage() {\n    let loadedTasks = localStorage.getItem(\"tasks\");\n    let tasks = JSON.parse(loadedTasks);\n    if (tasks) {\n      setTasks(tasks);\n    }\n  }\n\n  return (\n    <div className=\"App\">\n      <h1 className=\"header\">Task Management</h1>\n      <main>\n        <section className=\"flex-container\">\n          <TaskList\n            tasks={tasks}\n            addEmptyTask={addEmptyTask}\n            addTask={addTask}\n            deleteTask={deleteTask}\n            moveTask={moveTask}\n            status=\"To Do\"\n          />\n          <TaskList\n            tasks={tasks}\n            addEmptyTask={addEmptyTask}\n            addTask={addTask}\n            deleteTask={deleteTask}\n            moveTask={moveTask}\n            status=\"In Progress\"\n          />\n          <TaskList\n            tasks={tasks}\n            addEmptyTask={addEmptyTask}\n            addTask={addTask}\n            deleteTask={deleteTask}\n            moveTask={moveTask}\n            status=\"Done\"\n          />\n        </section>\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n",{"ruleId":"23","replacedBy":"24"},{"ruleId":"25","replacedBy":"26"},{"ruleId":"27","severity":1,"message":"28","line":1,"column":10,"nodeType":"29","messageId":"30","endLine":1,"endColumn":16},"no-native-reassign",["31"],"no-negated-in-lhs",["32"],"no-unused-vars","'useRef' is defined but never used.","Identifier","unusedVar","no-global-assign","no-unsafe-negation"]